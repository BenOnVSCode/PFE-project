// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole  @default(CLIENT)
  isActive      Boolean   @default(false)
  bio           String?   @db.Text
  location      String?
  website       String?
  phone         String?
  skills        String[]  // For developers
  experience    String?   @db.Text // For developers
  company       String?   // For clients
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]
  verificationToken VerificationToken[]
  gigs        Gig[]        @relation("GigOwner")
  applications Application[] @relation("ApplicationAuthor")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  user User @relation(fields: [identifier], references: [email], onDelete: Cascade)

  @@unique([identifier, token])
}

model Gig {
  id          String    @id @default(cuid())
  title       String
  description String    @db.Text
  budget      String?
  timeline    String?
  skills      String[]  // Array of required skills
  status      GigStatus @default(OPEN)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  ownerId String
  owner   User          @relation("GigOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  applications Application[]
}

model Application {
  id          String           @id @default(cuid())
  message     String           @db.Text
  status      ApplicationStatus @default(PENDING)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  gigId    String
  gig      Gig    @relation(fields: [gigId], references: [id], onDelete: Cascade)
  authorId String
  author   User   @relation("ApplicationAuthor", fields: [authorId], references: [id], onDelete: Cascade)

  @@unique([gigId, authorId])
}

enum UserRole {
  CLIENT
  DEVELOPER
}

enum GigStatus {
  OPEN
  CLOSED
  COMPLETED
}

enum ApplicationStatus {
  PENDING
  ACCEPTED
  REJECTED
}
